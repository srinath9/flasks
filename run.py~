from flask import Flask

# Initialize the Flask application
app = Flask(__name__)

# Define a basic root route, will only accept GET requests as
# that's the default behaviour for the moment. We'll use the
# route decorator, and define the view function that will be
# executed when the current route is matched/requested
@app.route('/')
def hello():
  # This would print Hello World
    return 'Hello World!'

# Define a route accepting POST and GET requests capturing
# a variable part, a name in this case, wrapping it between <>
# The variable needs to be passed to the view function as 
# a keyword argument
@app.route('/hello/<name>', methods=['GET', 'POST'])
def hello_name(name):
  # If the user browsed /hello/John, the output would be
  # "Hello John!"
    return 'Hello %s!' % name

# An extra twist to the previous case, the variable part needs
# to be a given data type, integer in this case. We need to
# wrap between <> the type (int) and name of the variable (number)
@app.route('/random-number/<int:number>')
def random_number(number):
  # If the user browsed /hello/John, the output would be
  # "Hello John!"
    return 'Number %d!' % number

# Just to finish we are going to create two different routes
# that are going to match/execute the same view function.
# This can become handy for example to list (on a blog system)
# all the posts matching a certaing tag, with pagination
@app.route('/tag/<reqtag>', defaults={'pagenumber': 1})
@app.route('/tag/<reqtag>/page/<int:pagenumber>')
def posts_by_tag(reqtag, pagenumber):
  # We captured from the requested URL the tag and the page
  # number. In case the URL only contained a tag, we set
  # the default page number to 1
    return "Showing post with tag %s, page %d" % (reqtag, pagenumber)

if __name__ == '__main__':
	app.run( 
        host="0.0.0.0",
        port=int("80")
